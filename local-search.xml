<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTML与CSS基础</title>
    <link href="/2022/09/16/HTML%E4%B8%8ECSS%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/16/HTML%E4%B8%8ECSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端是什么？现在打开你的浏览器，进入一个页面，你看到了什么，没错，你现在看到的就是前端！但前端包括并不只限于此。随着现在前端技术的发展，各种跨平台方案的涌现，大前端成为了热门。我们不仅能写网页，也能利用node.js写后端，还可以利用一些跨平台方案去写手机小程序、App等等。。。总之，目之所及，皆为前端。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><a href="https://segmentfault.com/a/1190000020281750">大家有兴趣了解前端发展史点我哦</a></p><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li><li>一句话说出html作用:</li></ul><p>网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。</p><h3 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 文本类型 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 头部标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标题标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 文档的主体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>他们的大致结构是嵌套、并列，且大部分是有始有终的。</p><h3 id="HTML常用的标签"><a href="#HTML常用的标签" class="headerlink" title="HTML常用的标签"></a>HTML常用的标签</h3><h4 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h4><p>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签，使网页更具语义化。</p><h5 id="标题（Heading）标签"><a href="#标题（Heading）标签" class="headerlink" title="标题（Heading）标签"></a>标题（Heading）标签</h5><p>通过h1 - h6标签来定义，作为标题使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>   标题文本   <span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="段落标签p"><a href="#段落标签p" class="headerlink" title="段落标签p"></a>段落标签p</h5><p>如同写文章分段一样，可以把 HTML 文档分割为若干段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>  文本内容  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="换行标签br，水平线标签hr"><a href="#换行标签br，水平线标签hr" class="headerlink" title="换行标签br，水平线标签hr"></a>换行标签br，水平线标签hr</h5><p><strong>br</strong>：break，打断；<strong>hr</strong>：horizontal rule,水平线</p><h5 id="div和span标签（重点，非常常用）"><a href="#div和span标签（重点，非常常用）" class="headerlink" title="div和span标签（重点，非常常用）"></a>div和span标签（重点，非常常用）</h5><p>这两个标签是没有语义的，但却是我们网页布局最常用的2个标签，都是用来装网页元素的，区别在于网页中一行通常只能放下一个div，但是可以放下多个span。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是一个span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h4><p>如上一条图像标签中，除了标签名以外的都是标签属性。使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p><h4 id="链接标签（重点）"><a href="#链接标签（重点）" class="headerlink" title="链接标签（重点）"></a>链接标签（重点）</h4><p>在HTML中创建超链接非常简单，只需用标签把文字包括起来就好。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>超链接跳转描述<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其取值有self和blank两种，其中_self为默认值，__blank为在新窗口中打开方式。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>外部链接 必须添加 “http:&#x2F;&#x2F;”</li><li>内部链接 直接链接内部页面名称即可 比如 &lt; a href&#x3D;”index.html”&gt; 首页</li><li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href&#x3D;”#”)，表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片未显示展示的文字&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标悬停图标上显示的文字&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="路径-重点"><a href="#路径-重点" class="headerlink" title="路径(重点)"></a>路径(重点)</h4><p>实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。</p><p><strong>目录文件夹：</strong></p><p>就是普通文件夹，里面只不过存放了我们做页面所需要的 相关素材，比如 html文件， 图片 等等。</p><p><strong>根目录</strong></p><p>打开目录文件夹的第一层就是根目录。</p><p>页面中的图片会非常多， 通常我们再新建一个文件夹专门用于存放图像文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径</p><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><table><thead><tr><th><strong>路径分类</strong></th><th><strong>符号</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>同一级路径</td><td>“.&#x2F;”</td><td>用于访问统计目录上面的文件或者文件夹。</td></tr><tr><td>下一级路径</td><td>“&#x2F;”</td><td>用于访问某文件夹下的文件或文件夹。</td></tr><tr><td>上一级路径</td><td>“..&#x2F;”</td><td>在文件名之前加入“..&#x2F;” ，如果是上两级，则需要使用 “..&#x2F; ..&#x2F;”，以此类推。</td></tr></tbody></table><p>相对路径，是从代码所在的这个文件出发， 去寻找我们的目标文件的，而 我们所说的 上一级 下一级 同一级 简单说，就是 图片 位于 HTML 页面的位置</p><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png%E2%80%9D%E3%80%82">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png”。</a></p><p><strong>注意：</strong></p><p>绝对路径用的<strong>较少</strong>，我们<strong>理解</strong>下就可以了。 但是要注意它的写法, 特别是符号 <code>\</code>并不是相对路径的 <code>/</code></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p><p><strong>特点：</strong></p><ul><li><p>只能嵌套，直接在标签中输入其他标签或者文字的做法是不被允许的。​</p></li><li><p>li相当于一个容器，可以容纳所有元素。</p></li><li><p>列表会带有自己样式属性，可以用css控制。</p></li></ul><p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p><h5 id="1-无序列表-ul（熟悉）"><a href="#1-无序列表-ul（熟悉）" class="headerlink" title="1) 无序列表 ul（熟悉）"></a>1) 无序列表 ul（熟悉）</h5><p>项目的顺序并不重要，就像购物列表。用一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a> 元素包围。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-有序列表-ol（了解）"><a href="#2-有序列表-ol（了解）" class="headerlink" title="2)有序列表 ol（了解）"></a>2)有序列表 ol（了解）</h5><p>项目的顺序很重要，就像烹调指南。用一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ol"><code>&lt;ol&gt;</code></a> 元素包围。</p><p>用法和ul类似，可以展示列表每个元素的序号。实际中ol比ul用的少很多。</p><h4 id="表单控件之“input”"><a href="#表单控件之“input”" class="headerlink" title="表单控件之“input”"></a>表单控件之“input”</h4><ul><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;属性值&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;你好&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>input 输入的意思</li><li><input />标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li>除了type属性还有别的属性</li></ul><h5 id="1-type-属性"><a href="#1-type-属性" class="headerlink" title="1. type 属性"></a>1. type 属性</h5><ul><li>这个属性通过改变值，可以决定了你属于那种input表单。</li><li>比如 type &#x3D; ‘text’ 就表示 文本框 可以做 用户名， 昵称等。</li><li>比如 type &#x3D; ‘password’ 就是表示密码框 用户输入的内容 是不可见的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span> <br>密 码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-value属性-gt-值"><a href="#2-value属性-gt-值" class="headerlink" title="2. value属性 -&gt; 值"></a>2. value属性 -&gt; 值</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li></ul><h5 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3. name属性"></a>3. name属性</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">“username”</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p><ul><li>name属性后面的值，是我们自己定义的。</li><li>radio 如果是一组，我们必须给他们命名相同的名字 name 这样就可以多个选其中的一个啦</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> /&gt;</span>男<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> /&gt;</span>女<br></code></pre></td></tr></table></figure><ul><li>name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是会用到的的。</li></ul><h5 id="4-checked属性"><a href="#4-checked属性" class="headerlink" title="4. checked属性"></a>4. checked属性</h5><ul><li>表示默认选中状态。 较常见于 单选按钮和复选按钮。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">性别:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span>男<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> /&gt;</span>女<br></code></pre></td></tr></table></figure><p>上面这个，表示就默认选中了 男 这个单选按钮</p><h5 id="5-placeholder属性"><a href="#5-placeholder属性" class="headerlink" title="5.placeholder属性"></a>5.placeholder属性</h5><p>显示描述文字，不用删除，在有文字输入时自动消失</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;这里是描述文字&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-input-属性小结"><a href="#5-input-属性小结" class="headerlink" title="5. input 属性小结"></a>5. input 属性小结</h5><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>type</td><td>表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td>表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td>表单名字</td><td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td>默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr><tr><td>placeholder</td><td>描述文字</td><td>可以介绍这里是用来做啥的</td></tr></tbody></table><h3 id="块级元素、行内元素、行内块元素"><a href="#块级元素、行内元素、行内块元素" class="headerlink" title="块级元素、行内元素、行内块元素"></a>块级元素、行内元素、行内块元素</h3><h5 id="什么是标签显示模式"><a href="#什么是标签显示模式" class="headerlink" title="什么是标签显示模式"></a>什么是标签显示模式</h5><ul><li>什么是标签的显示模式？<br>标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个</li><li>作用：<br>我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</li><li>标签的类型(分类)<br>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。</li></ul><h5 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h5><ul><li>例：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的块元素有<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>等，其中<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>标签是最典型的块元素。<br></code></pre></td></tr></table></figure><ul><li>块级元素的特点</li></ul><p>（1）比较霸道，自己独占一行</p><p>（2）高度，宽度、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器（父级宽度）的100%</p><p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p><h5 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h5><ul><li>例：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的行内元素有<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>等，<br>其中<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>标签最典型的行内元素。有的地方也成内联元素<br></code></pre></td></tr></table></figure><ul><li>行内元素的特点：</li></ul><p>（1）相邻行内元素在一行上，一行可以显示多个。</p><p>（2）高、宽直接设置是无效的。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><h5 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h5><ul><li><p>在行内元素中有几个特殊的标签<code>&lt;img /&gt;</code>,<code>&lt;input /&gt;</code>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</p></li><li><p>行内块元素的特点：</p><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个（2）默认宽度就是它本身内容的宽度。</p><p>（3）高度，行高、外边距以及内边距都可以控制。</p></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><strong>层叠样式表</strong> (Cascading Style Sheets，缩写为 <strong>CSS</strong>），是一种 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/StyleSheet">样式表</a> 语言，用来描述 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/XML/XML_Introduction">XML</a>（包括如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG">SVG</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/MathML">MathML</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/XHTML">XHTML</a> 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p><p>它是<a href="https://developer.mozilla.org/en-US/docs/Glossary/HTML">HTML</a>之后应该开始学习的第一项技术。HTML用于定义内容的结构和语义，而CSS用于设置其样式和布局。例如，可以使用 CSS 更改内容的字体、颜色、大小和间距，将其拆分为多个列，或添加动画和其他装饰功能。</p><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><p>在网页元素上通过 <code>style=&quot;&quot;</code> 属性直接写样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--基本格式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br><span class="hljs-comment">&lt;!--举个栗子--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green; margin-top: 30px;border: 1px solid red;width: 500px&quot;</span>&gt;</span>行内样式实例1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h4><p>在网页上创建嵌入的样式表，通常写在 <code>&lt;head&gt;&lt;/head&gt;</code> 里面。基本格式语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/CSS&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    选择器（选择的标签） &#123; </span><br><span class="language-css">      属性<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>;</span><br><span class="language-css">      属性<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>; </span><br><span class="language-css">      属性<span class="hljs-number">3</span>: 属性值<span class="hljs-number">3</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="外部样式-重点"><a href="#外部样式-重点" class="headerlink" title="外部样式(重点)"></a>外部样式(重点)</h4><p>实际开发都是外部样式表. 适合于样式比较多的情况. 核心是: 样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用。引入外部样式表分为两步：</p><ul><li><p>新建一个后缀名为<code>.css</code>的样式文件，把所有 CSS 代码都放入此文件中。</p></li><li><p>在 HTML 页面中，使用<code>&lt;link&gt;</code>标签引入这个文件。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>简单讲讲最常用的选择器。</p><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>标签选择器（元素选择器）是指用<strong>HTML标签名</strong>称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>使用id选择器时需要注意几点：</p><ul><li><p>给要添加样式的标签元素添加id属性（自定义）。</p></li><li><p>长名称或词组可以使用中横线来为选择器命名。</p></li><li><p>不要纯数字、中文等命名， 尽量使用英文字母来表示。</p></li></ul><p>id选择器使用符号<code>#</code>进行标识，后面紧跟id名。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#title</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><p>类选择器使用符号<code>.</code>（英文点号）进行标识，后面紧跟类名。</p><p>使用方法与ID选择器类似，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.title</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>一个元素可以有多个class，但只能有一个id。多个类名的表示在<code>class=“”</code>中用空格隔开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box container&quot;</span>&gt;</span>box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p><strong>网页布局的本质</strong></p><ul><li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等，放入盒子里面。</li></ul><p>在 CSS 中我们广泛地使用两种“盒子” —— <strong>块级盒子</strong> (<strong>block box</strong>) 和 <strong>内联盒子</strong> (<strong>inline box</strong>)。</p><p>这两种盒子会在<strong>页面流</strong>（page flow）和元素之间的关系方面表现出不同的行为：</p><h4 id="块级盒子"><a href="#块级盒子" class="headerlink" title="块级盒子"></a>块级盒子</h4><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul><h4 id="内联盒子"><a href="#内联盒子" class="headerlink" title="内联盒子"></a>内联盒子</h4><ul><li>盒子不会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><p>我们通过对盒子<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 属性的设置，比如 <code>inline</code> 或者 <code>block</code> ，来控制盒子的外部显示类型。</p><h3 id="一些CSS属性"><a href="#一些CSS属性" class="headerlink" title="一些CSS属性"></a>一些CSS属性</h3><p>最基本的<strong>width、height</strong>设置宽高，color设置字体颜色，</p><p>设置字体样式的还有font-size、font-weight、font-family…</p><p>盒模型相关的<strong>border、padding、margin</strong></p><p>设置背景用<strong>background</strong></p><h3 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h3><h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4><p>与<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade"><strong>层叠</strong></a>密切相关的概念是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity"><strong>优先级</strong>（specificity）</a>，决定在发生冲突的时候应该使用哪条规则。</p><p>有三点需要考虑：</p><ol><li>资源顺序</li><li>优先级</li><li>重要程度</li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>顾名思义是元素属性的继承，那继承的方式又是怎样的呢，其实就是在网页元素嵌套中，子元素继承父元素的属性。</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h4><ul><li><p>让多个盒子水平排成一排</p></li><li><p>实现盒子向左向右对齐</p></li></ul><h4 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h4><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><p><strong>语法</strong></p><p>属性默认值none，可设置为left或right向左右浮动对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">...<br><span class="hljs-attribute">float</span>:none;<br>...<br></code></pre></td></tr></table></figure><h3 id="定位（重点）"><a href="#定位（重点）" class="headerlink" title="定位（重点）"></a>定位（重点）</h3><p>定位的整个想法是允许我们覆盖基本文档流行为，以产生有趣的效果。</p><h4 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h4><p>相对定位的特点（务必记住）：</p><ul><li>相对于自己原来在标准流中位置来移动的</li><li>原来<strong>在标准流的区域继续占有</strong>，后面的盒子仍然以标准流的方式对待它。</li></ul><h4 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h4><p>绝对定位是元素以带有定位的父级元素来移动位置，所以我们使用定位通常遵循<strong>子绝父相</strong>的原则。其特点：</p><ul><li><p><strong>完全脱标</strong> —— 完全不占位置。</p></li><li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p></li><li><p>将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</p></li></ul><h3 id="居中小技巧"><a href="#居中小技巧" class="headerlink" title="居中小技巧"></a>居中小技巧</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p>利用行高line-height设置为元素高度来进行<strong>单行文字</strong>的垂直居中</p><h3 id="去除默认样式"><a href="#去除默认样式" class="headerlink" title="去除默认样式"></a>去除默认样式</h3><p>去除a标签的下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>去除ul列表的 · 以及ol列表的序号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>去除默认的margin和padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React Router Hooks使用</title>
    <link href="/2022/08/25/react%20router/"/>
    <url>/2022/08/25/react%20router/</url>
    
    <content type="html"><![CDATA[<h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>这个钩子返回当前<code>location</code>对象,可获取当前的<code>pathname</code>,<code>hash</code>,<code>key</code>,<code>search</code>,<code>state</code>。</p><p>注:search和state由其它hooks设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br></code></pre></td></tr></table></figure><h2 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h2><p>钩子返回一个函数，允许您以编程方式导航。如果使用<code>replace: true</code>，导航将替换历史堆栈中的当前条目，而不是添加新条目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/home&quot;</span>, &#123; <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span> &#125;, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个参数是需要跳转的路径，第二个参数是传递状态信息，(<code>location</code>中的<code>state</code>,是否替换当前路径等)。</p><h2 id="useOutletContext"><a href="#useOutletContext" class="headerlink" title="useOutletContext"></a>useOutletContext</h2><p>通常，父路由管理您希望与子路由共享的状态或其他值。如果您愿意，您可以创建自己的<a href="https://reactjs.org/docs/context.html">上下文提供程序</a>，但使用<code>&lt;Outlet /&gt;</code>是一种常见的情况。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> <span class="hljs-attr">context</span>=<span class="hljs-string">&#123;[count,</span> <span class="hljs-attr">setCount</span>]&#125; /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useOutletContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useOutletContext</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数的传递可以是对象或数组，上面的例子还可以写成:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> <span class="hljs-attr">context</span>=<span class="hljs-string">&#123;&#123;count,</span> <span class="hljs-attr">setCount</span>&#125;&#125; /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useOutletContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;count, setCount&#125; = <span class="hljs-title function_">useOutletContext</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h2><p>当使用<code>/path/:id</code>形式的动态路由,会从匹配的当前URL返回一个动态参数的键&#x2F;值对对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以/home/:id为例</span><br><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br><span class="hljs-comment">//当路径为/home/123时会输出 &#123; id : &#x27;123&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setSearchParams</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoYang&quot;</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span>&#123;/* ... */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>searchParams</code>是一个含有多种方法的对象，<code>setSearchParams</code>可以设置搜索参数。</p><p>可以在<code>location</code>对象中得到<code>search</code>参数”?id&#x3D;123&amp;name&#x3D;xiaoYang”</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redux与Typescript</title>
    <link href="/2022/08/16/redux-typescript/"/>
    <url>/2022/08/16/redux-typescript/</url>
    
    <content type="html"><![CDATA[<h2 id="用Provider提供store"><a href="#用Provider提供store" class="headerlink" title="用Provider提供store"></a>用Provider提供store</h2><p>创建store后可以用<code>Provider</code>将store作为<code>prop</code>传递下去</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>)<br><br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h2 id="创建一个store"><a href="#创建一个store" class="headerlink" title="创建一个store"></a>创建一个store</h2><p>根据<a href="https://react-redux.js.org/using-react-redux/usage-with-typescript#define-root-state-and-dispatch-types">官方文档</a>，在使用<code>configureStore</code>创建好store后需要提取<code>RootState</code>类型和<code>AppDispatch</code>类型，以便按需引入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">counter</span>:counterReducer<br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RootState</span> = <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> store.<span class="hljs-property">getState</span>&gt;<span class="hljs-comment">//导出store的类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppDispatch</span> = <span class="hljs-keyword">typeof</span> store.<span class="hljs-property">dispatch</span><span class="hljs-comment">//导出store的dispatch方法类型</span><br></code></pre></td></tr></table></figure><h2 id="创建一个状态片"><a href="#创建一个状态片" class="headerlink" title="创建一个状态片"></a>创建一个状态片</h2><p>store需要的reducer由slice提供。创建一个<code>slice</code>需要一个字符串名称来标识片，一个初始状态值，以及一个或多个reducer函数来定义如何更新状态。一旦一个切片被创建，我们就可以为整个切片导出生成的Redux动作创建器和reducer函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> counterSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;counter&#x27;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> -= <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">incrementByAmount</span>: <span class="hljs-function">(<span class="hljs-params">state, action: PayloadAction&lt;<span class="hljs-built_in">number</span>&gt;</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> += action.<span class="hljs-property">payload</span><br>    &#125;,<br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="hljs-property">actions</span><span class="hljs-comment">//导出actions</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> counterSlice.<span class="hljs-property">reducer</span><span class="hljs-comment">// 导出reducer</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基本写法需引入<code>AppDispatch</code>、<code>RootState</code>类型，和切片方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector, <span class="hljs-title class_">TypedUseSelectorHook</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppDispatch</span>, <span class="hljs-title class_">RootState</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; increment &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/slice&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state: RootState</span>) =&gt;</span> state.<span class="hljs-property">counter</span>.<span class="hljs-property">count</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">dispatch</span>: <span class="hljs-title class_">AppDispatch</span> = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-comment">// 省略呈现逻辑</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="定义类型hooks"><a href="#定义类型hooks" class="headerlink" title="定义类型hooks"></a>定义类型hooks</h3><p>虽然可以将<code>RootState</code>and<code>AppDispatch</code>类型导入到每个组件中，但最好创建<code>useDispatch</code>和<code>useSelector</code>hooks 的类型化版本以在您的应用程序中使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypedUseSelectorHook</span>, useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">RootState</span>, <span class="hljs-title class_">AppDispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-comment">//在整个应用中使用，而不是普通的&#x27; useDispatch &#x27;和&#x27; useSelect &#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">useAppDispatch</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">AppDispatch</span> = useDispatch<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">useAppSelector</span>: <span class="hljs-title class_">TypedUseSelectorHook</span>&lt;<span class="hljs-title class_">RootState</span>&gt; = useSelector<br></code></pre></td></tr></table></figure><h4 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h4><ul><li><p>不用在每次使用<code>useSelector</code>时输入<code>(state: RootState)</code></p></li><li><p>对于<code>useDispatch</code>，默认<code>Dispatch</code>类型不知道 thunk。为了正确调度 thunk，您需要使用<code>AppDispatch</code>商店中包含 thunk 中间件类型的特定自定义类型，并将其与<code>useDispatch</code>. 添加一个预先输入的<code>useDispatch</code>钩子可以防止你忘记<code>AppDispatch</code>在需要的地方导入。</p></li></ul><h3 id="在组件中使用-Typed-Hooks"><a href="#在组件中使用-Typed-Hooks" class="headerlink" title="在组件中使用 Typed Hooks"></a>在组件中使用 Typed Hooks</h3><p>在组件文件中，从 React-Redux 导入预类型的钩子而不是标准的钩子。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; useAppSelector, useAppDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;app/hooks&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; decrement, increment &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./counterSlice&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// “状态”参数被正确输入为“RootState”</span><br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useAppSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">counter</span>.<span class="hljs-property">value</span>)<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useAppDispatch</span>()<br><br>  <span class="hljs-comment">// 省略呈现逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/14/hello-world/"/>
    <url>/2022/08/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>使用hexo创建的第一篇文章，之后还会陆陆续续增添更多的文章。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vite-and-postcss</title>
    <link href="/2022/08/06/postcss/"/>
    <url>/2022/08/06/postcss/</url>
    
    <content type="html"><![CDATA[<h2 id="postcss-px-to-viewport在Vite中如何配置"><a href="#postcss-px-to-viewport在Vite中如何配置" class="headerlink" title="postcss-px-to-viewport在Vite中如何配置"></a>postcss-px-to-viewport在Vite中如何配置</h2><p>因为Vite中已经内联了postcss，所以不需要创建额外的postcss.config.js文件。</p><p><a href="https://vitejs.cn/config/#css-modules">Vite关于postcss</a></p><p>我们只需要在vite.config.js中进行配置即可，具体配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> postcsspxtoviewport <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;postcss-px-to-viewport&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>()<br>  ],<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">postcss</span>: &#123;<br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">postcsspxtoviewport</span>(&#123;<br>          <span class="hljs-attr">unitToConvert</span>: <span class="hljs-string">&#x27;px&#x27;</span>, <span class="hljs-comment">// 要转化的单位</span><br>          <span class="hljs-attr">viewportWidth</span>: <span class="hljs-number">750</span>, <span class="hljs-comment">// UI设计稿的宽度</span><br>          <span class="hljs-attr">unitPrecision</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 转换后的精度，即小数点位数</span><br>          <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>], <span class="hljs-comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span><br>          <span class="hljs-attr">viewportUnit</span>: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-comment">// 指定需要转换成的视窗单位，默认vw</span><br>          <span class="hljs-attr">fontViewportUnit</span>: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-comment">// 指定字体需要转换成的视窗单位，默认vw</span><br>          <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&#x27;ignore-&#x27;</span>], <span class="hljs-comment">// 指定不转换为视窗单位的类名，</span><br>          <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 默认值1，小于或等于1px则不进行转换</span><br>          <span class="hljs-attr">mediaQuery</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在媒体查询的css代码中也进行转换，默认false</span><br>          <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否转换后直接更换属性值</span><br>          <span class="hljs-comment">// exclude: [/node_modules/], // 设置忽略文件，用正则做目录名匹配</span><br>          <span class="hljs-attr">exclude</span>: [],<br>          <span class="hljs-attr">landscape</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否处理横屏情况</span><br>        &#125;)<br>      ]<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>完成后重启项目就能看到px转化为vw单位了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
